# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error, r2_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
import joblib

# Load and preprocess the dataset
data = pd.read_csv('D:/DGSR/DGSR/dataset/synthetic_solar_radiation_dataset_10000.csv')  # Update with actual path
X = data.drop(columns=['Global_Solar_Radiation_Wh/m²'])
y = data['Global_Solar_Radiation_Wh/m²']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize data
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Save the scaler for later use
joblib.dump(scaler, 'scaler.pkl')

# Build and train the ANN model
ann_model = Sequential([
    Dense(64, input_dim=X_train.shape[1], activation='relu'),
    Dense(32, activation='relu'),
    Dense(16, activation='relu'),
    Dense(1)
])
ann_model.compile(optimizer='adam', loss='mse', metrics=['mse'])
ann_model.fit(X_train, y_train, epochs=50, batch_size=16, verbose=1, validation_split=0.2)

# Save the model for later use
ann_model.save('ANN_model.h5')

# Evaluate the model
y_pred_ann = ann_model.predict(X_test).flatten()
rmse_ann = np.sqrt(mean_squared_error(y_test, y_pred_ann))
nrmse_ann = rmse_ann / (y_test.max() - y_test.min())
mape_ann = mean_absolute_percentage_error(y_test, y_pred_ann)
mbe_ann = np.mean(y_pred_ann - y_test)
r2_ann = r2_score(y_test, y_pred_ann)

# Display results
results = {
    "RMSE": round(rmse_ann, 2),
    "NRMSE (%)": round(nrmse_ann * 100, 2),
    "MAPE (%)": round(mape_ann * 100, 2),
    "MBE": round(mbe_ann, 2),
    "R² (%)": round(r2_ann * 100, 2),
}
print("Model Evaluation Metrics:")
for metric, value in results.items():
    print(f"{metric}: {value}")

# Prediction function for new data
def predict_solar_radiation(input_features):
    # Load model and scaler
    scaler = joblib.load("scaler.pkl")
    ann_model = tf.keras.models.load_model("ANN_model.h5")

    # Scale the input features
    input_scaled = scaler.transform([input_features])

    # Make prediction
    prediction = ann_model.predict(input_scaled)[0][0]
    return round(prediction, 2)

# Example usage of the prediction function
# Replace the values in input_features with your actual input data for prediction
input_features = [
    0.5,  # VIS06_Reflectance
    0.4,  # VIS08_Reflectance
    0.6,  # HRV_Reflectance
    0.7,  # IR016_Reflectance
    45.0, # Solar_Zenith_Angle_deg
    25.0, # Temperature_C
    60.0, # Humidity_%
    5.0   # Wind_Speed_m/s
]

predicted_radiation = predict_solar_radiation(input_features)
print(f"Predicted Solar Radiation: {predicted_radiation} Wh/m²")



